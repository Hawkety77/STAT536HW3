# Monte Carlo standard error
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
# Print results
cat("Estimated area: ", estimated_area, "\n")
# Print results
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
#Save results
writeLines(sprintf("Estimated area: %f\nMonte Carlo Standard Error: %f", estimated_area, mcse), "area.ext")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
N <- 10^4
x_min <- 0
x_max <- 1
y_min <- 0
y_max <- 1
x <- runif(N, x_min, x_max)
y <- runif(N, y_min, y_max)
hits <- (x^2 + y^2 <= 0.5) & (x^2 <= y & y <= x)
p.hits <- mean(hits)
# Area of the bounding box (the unit square)
bounding.area <- (x_max - x_min) * (y_max - y_min)
# Estimate the area of the region (this is p.hits since we used the unit square)
#p.area <- p.hits * bounding.area
#MCSE
mcse <- sqrt(p.hits * (1 - p.hits) / N) * bounding.area
cat("Estimated area: ", p.hits, "\n")
cat("Monte Carlo Standard Error (MCSE): ", mcse, "\n")
y.0=(-1+sqrt(3))/2
log.L <- logging[logging$Action == "L", "log.PercentLost"]
log.U <- logging[logging$Action == "U", "log.PercentLost"]
#With the patchwork library
logging.original + logging.transformed
logging <- Sleuth3::ex0429
L <- logging[logging$Action == "L", "PercentLost"]
U <- logging[logging$Action == "U", "PercentLost"]
#Simulation to measure confidence interval
delta = (-100):100
alpha = 0.05
p.values <- numeric(length(delta))
for(d in 1:length(delta)){
U.prime <- U+delta[d]
test <- wilcox.test(L, U.prime, paired = FALSE)
p.values[d] <- test$p.value
}
#95% Confidence Interval Simulating additive effects
delta[c(min(which(p.values >= 0.05)),
max(which(p.values >= 0.05)))]
logging$log.PercentLost = log(logging$PercentLost)
#Wilcoxon Rank-Sum Test on log-transformed data
wilcox.test(log.L, log.U, paired=FALSE)
log.L <- logging[logging$Action == "L", "log.PercentLost"]
log.U <- logging[logging$Action == "U", "log.PercentLost"]
#Wilcoxon Rank-Sum Test on log-transformed data
wilcox.test(log.L, log.U, paired=FALSE)
## b - Wilcox t-test
#(Although sample standard deviations are close enough
#to the point where a standard t-test would do)
t.test(L, U)$conf.int
t.test(log.Lifetime ~ Group, data=guinea)
guinea$log.Lifetime = log(guinea$Lifetime)
t.test(log.Lifetime ~ Group, data=guinea)
schizophrenia.test <-
t.test(log(schizophrenia$Unaffected),
log(schizophrenia$Affected), var.equal = T,
paired=T)
schizophrenia <- Sleuth3::case0202
##a
hist(schizophrenia$Unaffected - schizophrenia$Affected,
main = "Histogram of Differences in Hippocampus Volumes",
xlab = "Difference",
ylab = "Frequency",
col = "lightblue",
border = "black",
breaks = 5)
##b
schizophrenia$log.Difference = log(schizophrenia$Unaffected)-
log(schizophrenia$Affected)
hist(schizophrenia$log.Difference,
main = "Histogram of Differences in Log Hippocampus Volumes",
xlab = "Difference",
ylab = "Frequency",
col = "lightblue",
border = "black",
breaks = 5)
t.test(schizophrenia$log.Difference, paired=T)
schizophrenia.test <-
t.test(log(schizophrenia$Unaffected),
log(schizophrenia$Affected), var.equal = T,
paired=T)
exp(schizophrenia.test$conf.int)
t.test(schizophrenia$log.Difference)
t.test(schizophrenia$Unaffected-schizophrenia$Affected)
#Wilcoxon signed-rank test
wilcox.test(log(schizophrenia$Unaffected),
log(schizophrenia$Affected),
paired=T,
exact=T)
#1 Compute differences (this is already done in (a))
#differences of the log-transformations is stored in
#schizophrenia$log.Difference
#2 Ignore zero differences by removing pairs with 0 difference
#(we don't have any exact 0s anyways)
any(schizophrenia$log.Difference == 0)
#3 Compute absolute rankings from smallest to largest
schizophrenia$Rank = order(abs(schizophrenia$log.Difference))
#4 Assign the ranks as either positive or negative based on the sign
# of the difference
schizophrenia$Rank = ifelse(schizophrenia$log.Difference < 0, -1, 1)*
schizophrenia$Rank
#5 compute the signed-rank statistic
s = sum(schizophrenia$Rank[schizophrenia$Rank > 0])
n <- nrow(schizophrenia)
combinations <- expand.grid(rep(list(c(-1, 1)), n))
r <- schizophrenia$Rank
s.distribution <- apply(combinations, 1, function(signs){
signed.r <- signs*r
sum(signed.r[signed.r > 0])
})
#Exact one-sided p-value
1-mean(s >= s.distribution)
#Normal approximation to compute p-value
mean.s <- n*(n+1)/4
sd.s <- sqrt(n*(n+1)*(2*n+1)/24)
z.stat <- (s-mean.s)/sd.s
#Approximate 1-sided p-value
1-pnorm(abs(z.stat))
wilcox.test(schizophrenia$Unaffected,
schizophrenia$Affected,
paired=T,
exact=T)
#Wilcoxon signed-rank test
wilcox.test(log(schizophrenia$Unaffected),
log(schizophrenia$Affected),
paired=T,
exact=T)
schizophrenia.test <-
t.test(log(schizophrenia$Unaffected),
log(schizophrenia$Affected), var.equal = T)
exp(schizophrenia.test$conf.int)
